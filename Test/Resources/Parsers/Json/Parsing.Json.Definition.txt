=============================================================
Grammar Definition
=============================================================
class Node @Document("Base class of JSON nodes.")
{
}

class Literal : Node @Document("Literal value node that is not number or string.")
{
    enum Value @Document("Literal value.")
    {
        True @Document("A boolean literal: true."),
        False @Document("A boolean literal: false."),
        Null @Document("A null literal."),
    }

    Value value @Document("The literal value.");
}

class String : Node @Document("String literal value node.")
{
    token content (JsonUnescapingString) @Document("Content of the string literal."), @Color("String");
}

class Number : Node @Document("Number literal value node.")
{
    token content @Document("Content of the number literal.");
}

class Array : Node @Document("Array node.")
{
    Node[] items @Document("Array elements.");
}

class ObjectField : Node @Document("Object property node.")
{
    token name (JsonUnescapingString) @Document("Property name."), @Color("AttName");
    Node value @Document("Property value.");
}

class Object : Node @Document("Object node.")
{
    ObjectField[] fields @Document("Object properties.");
}

token TRUEVALUE = "true" @Color("Keyword");
token FALSEVALUE = "false" @Color("Keyword");
token NULLVALUE = "null" @Color("Keyword");
token OBJOPEN = "\{" @Color("Boundary");
token OBJCLOSE = "\}" @Color("Boundary");
token ARROPEN = "\[" @Color("Boundary");
token ARRCLOSE = "\]" @Color("Boundary");
token COMMA = ",";
token COLON = ":";
token NUMBER = "[\-]?\d+(.\d+)?([eE][+\-]?\d+)?" @Color("Number");
token STRING = """([^\\""]|\\[^u]|\\u\d{4})*""" @ContextColor();
discardtoken SPACE = "\s+";

rule Node JLiteral
        = STRING : content as String
        = NUMBER : content as Number
        = "true" as Literal with { value = "True" }
        = "false" as Literal with { value = "False" }
        = "null" as Literal with { value = "Null" }
        ;
rule ObjectField JField
        = STRING : name ":" JValue : value as ObjectField
        ;
rule Object JObject
        = "{" [ JField : fields { "," JField : fields } ] "}" as Object
        ;
rule Array JArray
        = "[" [ JValue : items { "," JValue : items } ] "]" as Array
        ;
rule Node JValue
        = !JLiteral
        = !JObject
        = !JArray
        ;
rule Node JRoot
        = !JObject
        = !JArray
        ;
